#!/usr/bin/env bash
############################
# This is a simple to use shell script that ensures:
# - we always have a fresh image matching our Dockerfile/dckr magic that gets rebuilt only if necessary
# - we always have a container started for that image, with our source mounted, that get restarted only if the image changed
# - we transparently pass any command to be exec-ed inside this container
############################

NO_CACHE=${NO_CACHE:-}
CACHE_DIR=${CACHE_DIR:-}
DOCKERFILE=${DOCKERFILE:-}
TARGET=${TARGET:-}

PLATFORMS=("alpine-38" "alpine-39" "alpine-310" "alpine-311" "alpine-next" "debian-8" "debian-9" "debian-10" "debian-current" "debian-next" "ubuntu-1404" "ubuntu-1604" "ubuntu-1804" "ubuntu-current" "ubuntu-next")

CONST_DCKR_PREFIX="com.dbdbdp.dckr"

############################
# generic Helpers
############################
DP_COLOR_RED=1
DP_COLOR_GREEN=2
DP_COLOR_YELLOW=3

# Prefix a date to a log line and output to stderr
_dp_stamp(){
  local color="$1"
  local level="$2"
  local i
  shift
  shift
  [ "$TERM" ] && [ -t 2 ] && >&2 tput setaf "$color"
  for i in "$@"; do
    >&2 printf "[%s] [%s] %s\\n" "$(date)" "$level" "$i"
  done
  [ "$TERM" ] && [ -t 2 ] && >&2 tput op
}

dp_logger_info(){
  _dp_stamp "$DP_COLOR_GREEN" "INFO" "$@"
}

dp_logger_warning(){
  _dp_stamp "$DP_COLOR_YELLOW" "WARNING" "$@"
}

dp_logger_error(){
  _dp_stamp "$DP_COLOR_RED" "ERROR" "$@"
}

# Check that we have docker
if ! command -v docker >/dev/null; then
  dp_logger_error "You need to install docker for this to work."
  exit 1
fi

if ! docker info >/dev/null 2>&1; then
  dp_logger_error "Docker does not seem to be running."
  exit 1
fi

docker_remove_image(){
  local tag="$1"
  local ex

  dp_logger_info " >>> Removing image ${CONST_DCKR_PREFIX}:${tag}"

  if ! ex="$(docker images -q "${CONST_DCKR_PREFIX}:${tag}")"; then
    dp_logger_error "Docker failed to lookup images!"
    exit 1
  fi
  if [ ! "$ex" ]; then
    dp_logger_info "No such image. Doing nothing."
    return
  fi
  # shellcheck disable=SC2086
  if ! docker rmi -f $ex 1>&2; then
    dp_logger_error "Docker failed to remove the image" "$ex"
    # XXX
    # exit 1
  fi
  dp_logger_info "Done removing image."
}

dckr_has_image(){
  # Tag name for the image to find
  local tag="$1"

  # Git information to match
  local dckr_git="$2"
  local local_git="$3"

  dp_logger_info " >>> Looking up image ${CONST_DCKR_PREFIX}:${tag} with dckr-git=$dckr_git and local-git=$local_git"

  if ! docker images -q "${CONST_DCKR_PREFIX}:${tag}" \
    --filter "label=${CONST_DCKR_PREFIX}.dckr_git=${dckr_git}" \
    --filter "label=${CONST_DCKR_PREFIX}.local_git=${local_git}"; then
    dp_logger_error "Docker failed to lookup images!"
    exit 1
  fi
}

docker_build_image(){
  # Tag name for the future image
  local tag="$1"

  # Git information to label with
  local dckr_git="$2"
  local local_git="$3"

  # Dockerfile and target to build from
  local dockerfile="$4"
  local target="$5"

  dp_logger_info " >>> Building from Dockerfile: $dockerfile" "Target: $target" "dckr-git: $dckr_git" "local-git: $local_git"

  if ! docker build --target "${target}" -t "${CONST_DCKR_PREFIX}:${tag}" \
    --label "${CONST_DCKR_PREFIX}.dckr_git=${dckr_git}" \
    --label "${CONST_DCKR_PREFIX}.local_git=${local_git}" \
    -f "${dockerfile}" . 1>&2; then
    dp_logger_error "Failed building!"
    exit 1
  fi
  dp_logger_info "Done" "Tagged as ${CONST_DCKR_PREFIX}:${tag}"
}

dckr_remove_containers(){
  # Tag name for the source image
  local tag="$1"

  # Mounted path
  local path="$2"

  local ex

  dp_logger_info " >>> Removing container from image ${CONST_DCKR_PREFIX}:${tag} mounted on $path"

  if ! ex="$(docker ps -qa \
    --filter "ancestor=${CONST_DCKR_PREFIX}:${tag}" \
    --filter "volume=$path"
  )"; then
    dp_logger_error "Docker failed to lookup container!"
    exit 1
  fi
  if [ ! "$ex" ]; then
    dp_logger_info "No such container. Doing nothing."
    return
  fi
  # shellcheck disable=SC2086
  if ! docker rm -f $ex 1>&2; then
    dp_logger_error "Docker failed to remove container" "$ex"
    exit 1
  fi
  dp_logger_info "Done removing container."
}

dckr_has_container(){
  # Tag name for the source image
  local tag="$1"

  # Mounted path
  local path="$2"

  # Git information to label with
  local dckr_git="$3"
  local local_git="$4"

  dp_logger_info " >>> Looking up container ${CONST_DCKR_PREFIX}:${tag} mounted on $path with dckr-git=$dckr_git and local-git=$local_git"

  if ! docker ps -q \
    --filter "ancestor=${CONST_DCKR_PREFIX}:${tag}" \
    --filter "volume=$path" \
    --filter "label=${CONST_DCKR_PREFIX}.dckr_git=${dckr_git}" \
    --filter "label=${CONST_DCKR_PREFIX}.local_git=${local_git}"; then
    dp_logger_error "Docker failed to list containers"
    exit 1
  fi
}

dckr_run_container(){
  # Tag name for the source image
  local tag="$1"

  # Mounted path
  local path="$2"

  # Git information to label with
  local dckr_git="$3"
  local local_git="$4"

  dp_logger_info " >>> Running container from ${CONST_DCKR_PREFIX}:${tag} with path $path and labels dckr-git: $dckr_git and local-git: $local_git"

  if ! docker run --detach --tty --restart always \
    --volume "$path":/dckr-project-mount \
    --label="${CONST_DCKR_PREFIX}.dckr_git=${dckr_git}" \
    --label="${CONST_DCKR_PREFIX}.local_git=${local_git}" \
    "${CONST_DCKR_PREFIX}:${tag}"; then
    dp_logger_error "Docker failed to run container"
    exit 1
  fi
}


# Internal
# XXX this is not portable - anyway to make it work for sh? using $0 would fail miserably with the right symlink combination, and readlink on mac is DOA
_here=$(cd "$(dirname "${BASH_SOURCE[0]:-$PWD}")" 2>/dev/null 1>&2 && pwd)

# Allows switching to a different Dockerfile
DCKR_DOCKERFILE="${DOCKERFILE:-$_here/dckr.Dockerfile}"
# Target inside the image - default to debian-current
DCKR_TARGET="${TARGET:-debian-current}"
# Local cache
DCKR_CACHE="${CACHE_DIR:-$_here/cache}"

dckr_loadcache(){
  local cachedir="$1"
  mkdir -p "$cachedir"
  for i in "$cachedir"/*; do
    docker load --input "$i"
  done
}

dckr_savecache(){
  local cachedir="$1"
  mkdir -p "$cachedir"
  for i in "${PLATFORMS[@]}"; do
    docker save "com.dbdbdp.dckr:$i" --output "$cachedir/$i"
  done
}

[ "$NO_CACHE" ] || dckr_loadcache "$DCKR_CACHE"

# DCKR hash
DCKR_HASH="$(cat "$_here/dckr" "$_here/dckr.Dockerfile" | shasum -a 256)"
DCKR_HASH=${DCKR_HASH%%  -*}

# Dockerfile hash
DCKR_DOCKERFILE_HASH="$(shasum -a 256 "$DCKR_DOCKERFILE")"
DCKR_DOCKERFILE_HASH=${DCKR_DOCKERFILE_HASH%%  -*}

# Tag hash
tag="$(printf "%s" "$DCKR_TARGET-$DCKR_DOCKERFILE" | shasum -a 256)"
tag="${tag%%  -*}"

# Get a possibly running container
id="$(dckr_has_container "$tag" "$(pwd)" "$DCKR_HASH" "$DCKR_DOCKERFILE_HASH")"

# No running container matching our data?
if [ ! "$id" ]; then
  force=

  # Remove all existing containers with that tag in that path (likely stale from old Dockerfile or dckr)
  dckr_remove_containers "$tag" "$(pwd)"

  # Build everything: start with dckr base images
  for i in "${PLATFORMS[@]}"; do
    dp_logger_info " *** Checking image $i"
    im=$(dckr_has_image "$i" "$DCKR_HASH" "$DCKR_HASH")
    # If our image is not there
    if [ ! "$im" ]; then
      # Remove possibly stale images from previous commits
      docker_remove_image "$i"
      # Build the image
      docker_build_image "$i" "$DCKR_HASH" "$DCKR_HASH" "$_here/dckr.Dockerfile" "$i"
      # Must rebuild the other image as well, because they may have changed
      force=true
    fi
  done

  # If any image was updated, consider it a go to save
  [ ! "$force" ] || dckr_savecache "$DCKR_CACHE"

  # Now, our target image
  im=$(dckr_has_image "$tag" "$DCKR_HASH" "$DCKR_DOCKERFILE_HASH")
  if [ ! "$im" ] || [ "$force" ]; then
    # Remove previous versions
    docker_remove_image "$tag"
    # Build it
    docker_build_image "$tag" "$DCKR_HASH" "$DCKR_DOCKERFILE_HASH" "$DCKR_DOCKERFILE" "$DCKR_TARGET"
  fi

  # Now, start the damn container
  id=$(dckr_run_container "$tag" "$(pwd)" "$DCKR_HASH" "$DCKR_DOCKERFILE_HASH")
fi

# Now, we know we have a running container from an up to date image, for sure
# We can now exec the command we were asked to perform
# Caveat: shell expansion happens on the host, unless you get your escaping right...
dp_logger_info "Running command '$*'"
dp_logger_info " - target: $DCKR_TARGET" " - origin dockerfile: $DCKR_DOCKERFILE" " - id: '${id}'"
if ! docker exec -ti "${id}" "$@"; then
  dp_logger_error "Docker failed to run command!"
  exit 1
fi
